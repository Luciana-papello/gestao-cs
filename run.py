#!/usr/bin/env python3
"""
Script de inicializa√ß√£o do Dashboard Papello
Facilita a execu√ß√£o e setup inicial
"""

import os
import sys
import subprocess
from pathlib import Path

def check_python_version():
    """Verifica vers√£o do Python"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        print(f"   Vers√£o atual: {sys.version}")
        sys.exit(1)
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} - OK")

def check_dependencies():
    """Verifica se depend√™ncias est√£o instaladas"""
    try:
        import flask
        import pandas
        import requests
        print("‚úÖ Depend√™ncias principais encontradas")
        return True
    except ImportError as e:
        print(f"‚ùå Depend√™ncias em falta: {e}")
        return False

def install_dependencies():
    """Instala depend√™ncias automaticamente"""
    print("üì¶ Instalando depend√™ncias...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ Depend√™ncias instaladas")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao instalar depend√™ncias")
        return False

def check_file_structure():
    """Verifica se todos os arquivos necess√°rios existem"""
    required_files = [
        "app.py",
        "config.py", 
        "data_utils.py",
        "requirements.txt",
        ".env",
        "templates/base.html",
        "templates/executive.html",
        "static/css/papello.css",
        "static/js/dashboard.js",
        "static/js/charts.js"
    ]
    
    missing_files = []
    for file in required_files:
        if not Path(file).exists():
            missing_files.append(file)
    
    if missing_files:
        print("‚ùå Arquivos em falta:")
        for file in missing_files:
            print(f"   - {file}")
        return False
    
    print("‚úÖ Estrutura de arquivos completa")
    return True

def test_google_sheets_connection():
    """Testa conex√£o com Google Sheets"""
    try:
        from data_utils import load_google_sheet_public
        from config import Config
        
        print("üîó Testando conex√£o com Google Sheets...")
        
        # Testar carregamento de uma planilha
        df = load_google_sheet_public(Config.CLASSIFICACAO_SHEET_ID, "classificacao_clientes3")
        
        if df.empty:
            print("‚ö†Ô∏è  Planilha vazia ou inacess√≠vel")
            return False
        
        print(f"‚úÖ Conex√£o OK - {len(df)} registros carregados")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na conex√£o: {str(e)}")
        print("   Verifique se as planilhas est√£o p√∫blicas")
        return False

def print_startup_info():
    """Mostra informa√ß√µes de inicializa√ß√£o"""
    print("\n" + "üéØ" * 30)
    print("     DASHBOARD PAPELLO - CUSTOMER SUCCESS")
    print("üéØ" * 30)
    print()
    print("üåê Acesso local:  http://localhost:5000")
    print("üåê Acesso rede:   http://0.0.0.0:5000")
    print()
    print("üìä Funcionalidades dispon√≠veis:")
    print("   ‚Ä¢ Vis√£o Executiva (KPIs e m√©tricas)")
    print("   ‚Ä¢ An√°lise de Recorr√™ncia")
    print("   ‚Ä¢ M√©tricas de Satisfa√ß√£o/NPS")
    print("   ‚Ä¢ Distribui√ß√µes visuais")
    print("   ‚Ä¢ An√°lises cr√≠ticas")
    print()
    print("‚öôÔ∏è  Para parar: Ctrl+C")
    print()

def run_flask_app():
    """Executa o aplicativo Flask"""
    try:
        from app import app
        print("üöÄ Iniciando servidor Flask...")
        app.run(debug=True, host='0.0.0.0', port=5000)
    except KeyboardInterrupt:
        print("\nüëã Dashboard finalizado pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro ao iniciar Flask: {str(e)}")

def main():
    """Fun√ß√£o principal"""
    print("üîß Iniciando setup do Dashboard Papello...\n")
    
    # Verifica√ß√µes iniciais
    check_python_version()
    
    if not check_file_structure():
        print("\n‚ùå Estrutura de arquivos incompleta")
        print("   Certifique-se de ter criado todos os arquivos necess√°rios")
        sys.exit(1)
    
    # Verificar/instalar depend√™ncias
    if not check_dependencies():
        response = input("\nüì¶ Instalar depend√™ncias automaticamente? (s/n): ")
        if response.lower() in ['s', 'sim', 'y', 'yes']:
            if not install_dependencies():
                sys.exit(1)
        else:
            print("Execute: pip install -r requirements.txt")
            sys.exit(1)
    
    # Testar conex√£o com dados
    if not test_google_sheets_connection():
        print("\n‚ö†Ô∏è  Problema na conex√£o com Google Sheets")
        response = input("Continuar mesmo assim? (s/n): ")
        if response.lower() not in ['s', 'sim', 'y', 'yes']:
            sys.exit(1)
    
    print("\n‚úÖ Todas as verifica√ß√µes passaram!")
    
    # Mostrar informa√ß√µes e executar
    print_startup_info()
    run_flask_app()

if __name__ == "__main__":
    main()